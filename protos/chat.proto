syntax = "proto3";

package chat;

// 玩家信息
message Player {
  string player_id = 1;       // 玩家唯一标识符
  string name = 2;            // 玩家名称
  bool is_host = 3;           // 是否为主机(服务器)
  bool is_connected = 4;      // 是否已连接
}

// 聊天消息
message ChatMessage {
  string message_id = 1;      // 消息唯一标识符
  string content = 2;         // 消息内容
  int64 timestamp = 3;        // 发送时间戳（Unix时间）
  string sender_id = 4;       // 发送者ID
  string sender_name = 5;     // 发送者名称
}

// 发送消息请求
message SendMessageRequest {
  string content = 1;
  string target_player_id = 2;  // 目标玩家ID，为空表示发送给所有人
}

// 发送消息响应
message SendMessageResponse {
  bool success = 1;
  string error_message = 2;
  ChatMessage message = 3;
}

// 获取消息请求
message GetMessagesRequest {
  // 空请求，获取所有消息
}

// 获取消息响应
message GetMessagesResponse {
  repeated ChatMessage messages = 1;
}

// 加入游戏请求
message JoinGameRequest {
  Player player = 1;          // 玩家信息
}

// 加入游戏响应
message JoinGameResponse {
  bool success = 1;
  string error_message = 2;
  repeated Player players = 3;  // 当前游戏中的所有玩家
}

// 离开游戏请求
message LeaveGameRequest {
  string player_id = 1;
}

// 离开游戏响应
message LeaveGameResponse {
  bool success = 1;
}

// 获取玩家列表请求
message GetPlayersRequest {
  // 空请求
}

// 获取玩家列表响应
message GetPlayersResponse {
  repeated Player players = 1;
}

// 主机变更通知
message HostChangeNotification {
  string new_host_id = 1;     // 新主机ID
  string new_host_name = 2;   // 新主机名称
}

// 聊天服务定义
service ChatService {
  // 发送消息
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  
  // 获取消息
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
  
  // 订阅消息流
  rpc SubscribeToMessages(GetMessagesRequest) returns (stream ChatMessage);
  
  // 加入游戏
  rpc JoinGame(JoinGameRequest) returns (JoinGameResponse);
  
  // 离开游戏
  rpc LeaveGame(LeaveGameRequest) returns (LeaveGameResponse);
  
  // 获取玩家列表
  rpc GetPlayers(GetPlayersRequest) returns (GetPlayersResponse);
  
  // 订阅玩家变动
  rpc SubscribeToPlayerChanges(GetPlayersRequest) returns (stream Player);
  
  // 订阅主机变更
  rpc SubscribeToHostChanges(GetPlayersRequest) returns (stream HostChangeNotification);
}